#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define NAV     1
#define SYM     2
#define FUNC    3
#define MEDIA   4
#define MOUSE   5
#define WINNAV  6

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_undo {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp LC(Z)>;
        };

        combo_q {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp Q>;
        };

        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp SEMI>;
        };
    };
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings =
                <&kp>,
                <&kp>;
        };
        hs: homerow_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Default";
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T         &kp Y  &kp U      &kp I    &kp O     &kp P
&kp A  &kp S  &kp D  &kp F  &kp G         &kp H  &kp K      &kp L    &kp L  &kp SEMI
&kp Z  &kp X  &kp C  &kp V  &kp B         &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH
                     &kp A  &kp A  &kp A  &kp A  &kp A      &kp A
            >;
        };

        raise {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans          &trans  &trans  &trans  &trans  &trans
      &trans        &trans        &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
      &trans        &trans        &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
                                          &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
